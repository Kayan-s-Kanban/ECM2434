Index: ECM2434/Ecolution/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import uuid\nimport io\nimport qrcode\nfrom django.db import models\nfrom django.db.models import Q, F, Sum, Max\nfrom django.contrib.auth.models import AbstractUser\nfrom django.conf import settings  # Best practice for referencing AUTH_USER_MODEL\nfrom django.utils import timezone\nfrom django.core.files.base import ContentFile\nfrom django.urls import reverse\n\nclass CustomUser(AbstractUser):  # Custom User model is the user class we use for base users and super users\n    \n    FONT_SIZE_SMALL = 13 #custom data type for font size takes px and converts them to english words\n    FONT_SIZE_MEDIUM = 16\n    FONT_SIZE_LARGE = 19\n\n    FONT_SIZE_CHOICES = [\n        (FONT_SIZE_SMALL, 'Small'),\n        (FONT_SIZE_MEDIUM, 'Medium'),\n        (FONT_SIZE_LARGE, 'Large'),\n    ]\n    points = models.IntegerField(default=0)  # the points field\n    preferred_font_size = models.PositiveSmallIntegerField( #stores the preferred font size also has a default so that the size of the text exists when a usr is not logged in \n        choices=FONT_SIZE_CHOICES,\n        default=FONT_SIZE_MEDIUM,\n    )\n    displayed_pet = models.ForeignKey(\n        'Pet',\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name='displayed_for'\n    )\n\n    @property\n    def highest_pet_level(self):\n        result = self.pet_set.aggregate(max_level=Max('pet_level'))\n        return result['max_level'] or 1\n\n    def __str__(self): #function that returns username\n        return f'{self.username}'\n\nclass Pet(models.Model): #weak entity pet that relies on user id to exist\n    SMALL = 'small' #custom data field used for describing size of pets\n    MEDIUM = 'medium'\n    LARGE = 'large'\n\n    SIZE_CHOICES = [\n        (SMALL, 'Small'),\n        (MEDIUM, 'Medium'),\n        (LARGE, 'Large'),\n    ]\n    MUSHROOM = 'mushroom' #custom data field used for describing type of pet\n    ACORN = 'acorn'\n    PLANT = 'plant'\n\n    PET_CHOICES = [\n        (MUSHROOM, 'Mushroom'),\n        (ACORN, 'Acorn'),\n        (PLANT, 'Plant'),\n    ]\n\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)  # since pets is a weak entity when the user is deleted the pet is also deleted thats what cascade does\n    pet_name = models.CharField(max_length=50) #pet name used in the display on the home page\n    pet_level = models.IntegerField(default=1) # pet level used to determine size and is displayed on the home page\n    pet_exp = models.IntegerField(default=0) #pet exp used to determine when a pet should level up also displayed on the home page\n    pet_type = models.CharField(max_length=10, choices=PET_CHOICES, default=MUSHROOM)  # pet type used in the home page to create the file path to where the image of the pets are\n    size = models.CharField(max_length=10, choices=SIZE_CHOICES, default=SMALL) #size is also used when creating the file path to find the pets \n\n    def determine_size(self): #used to update the size of the pets based on the level of them\n        \"\"\"Sets the pet size based on its level.\"\"\"\n        if self.pet_level < 4:\n            return self.SMALL\n        elif 4 <= self.pet_level < 7:\n            return self.MEDIUM\n        else:\n            return self.LARGE\n\n    def save(self, *args, **kwargs): #used to update the size data item so deterine size isnt constantly used when opening th ehome page\n        \"\"\"Automatically updates the size before saving.\"\"\"\n        self.size = self.determine_size()\n        super().save(*args, **kwargs)\n\n    class Meta: #used to set constraints on the pet level and pet exp\n        unique_together = ('user', 'pet_name')\n        constraints = [\n            models.CheckConstraint(\n                check=models.Q(pet_exp__gte=0) & models.Q(pet_exp__lte=100),\n                name='pet_exp_range'\n            )\n        ]\n    \n    @property # generate image url for the pet\n    def computed_image_url(self):\n        return f\"/static/images/pets/{self.pet_type}/{self.pet_type}_{self.size}.gif\" # Might need to change this or the determine size so it updates on changes\n\n    def __str__(self):\n        return f'{self.pet_name} - {self.user.username}'\n\nclass Event(models.Model): \n    event_id = models.AutoField(primary_key=True)\n    event_name = models.CharField(max_length=100)\n    description = models.TextField()\n    location = models.CharField(max_length=100, blank=True)\n    date = models.DateField(default=timezone.now)\n    time = models.TimeField(default=timezone.now)\n    unique_token = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n    qr_code = models.ImageField(upload_to='qr_codes/', blank=True, null=True)\n    url_qr_code = models.URLField(blank=True, null=True) # This field is here to allow me to test the view without currently needing to scan the QR Code\n\n    @property\n    def total_points(self):\n        return self.task_set.aggregate(total=Sum('points_given'))['total'] or 0\n    \n    @property\n    def total_xp(self):\n        return self.task_set.aggregate(total=Sum('xp_given'))['total'] or 0\n\n    def __str__(self):\n        return f'{self.event_name}'\n    \n    def save(self, *args, **kwargs):\n        is_new = self.pk is None\n        # First, save the object to get a primary key if it’s new\n        super().save(*args, **kwargs)\n        \n        # Generate and save QR code if this is a new instance or if there is no QR code yet.\n        if is_new or not self.qr_code:\n            # Generate the relative URL using reverse()\n            relative_url = reverse('validate_qr', kwargs={'token': self.unique_token})\n            # Combine with the base URL\n            full_url = f'http://127.0.0.1:8000/{relative_url}'\n            \n            # Create the QR code image using the qrcode library.\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=10,\n                border=4,\n            )\n            qr.add_data(full_url)\n            qr.make(fit=True)\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n            \n            # Save the image to a bytes buffer.\n            buffer = io.BytesIO()\n            img.save(buffer, format='PNG')\n            \n            # Create a filename that might include the event's pk.\n            file_name = f'event_{self.pk}_qr.png'\n            self.qr_code.save(file_name, ContentFile(buffer.getvalue()), save=False)\n            self.url_qr_code = full_url\n            super().save(*args, **kwargs)\n    \nclass Task(models.Model):\n    task_id = models.AutoField(primary_key=True)\n    task_name = models.CharField(max_length=100)\n    description = models.TextField()\n    points_given = models.IntegerField(default=500)\n    xp_given = models.IntegerField(default=20)\n    creator = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)\n    event = models.ForeignKey(Event, on_delete=models.CASCADE, default=None, null=True)\n\n    class Meta:\n        constraints = [\n            models.UniqueConstraint(\n                fields=['task_name', 'creator'],\n                name='unique_task_for_creator'\n            )\n        ]\n\n    def __str__(self):\n        return f'{self.task_name}'\n\n\nclass UserTask(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)  # ✅ Dynamic reference\n    task = models.ForeignKey(Task, on_delete=models.CASCADE)\n    completed = models.BooleanField(default=False)\n    date = models.DateField(default=timezone.now)\n\n    class Meta:\n        unique_together = ('user', 'task', 'date')\n\n    def __str__(self):\n        return f'{self.user.username} - {self.task.task_name}'\n\nclass UserEvent(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)  # ✅ Dynamic reference\n    event = models.ForeignKey(Event, on_delete=models.CASCADE)\n    completed = models.BooleanField(default=False)\n    date = models.DateField(default=timezone.now)\n    validated = models.BooleanField(default=False)\n\n    class Meta:\n        unique_together = ('user', 'event', 'date')\n\n    def __str__(self):\n        return f'{self.user.username} - {self.event.event_name}'\n    \nclass ShopItem(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    price = models.IntegerField(default=5000)\n    image_path = models.CharField(max_length=255, default='') # haven't added a default image path yet\n\n    def __str__(self):\n        return f'{self.name}'\n\nclass UserItem(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)  # ✅ Dynamic reference\n    shopitem = models.ForeignKey(ShopItem, on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ('user', 'shopitem')\n\n    def __str__(self):\n        return f'{self.user.username} - {self.shopitem.name}'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ECM2434/Ecolution/models.py b/ECM2434/Ecolution/models.py
--- a/ECM2434/Ecolution/models.py	(revision 60f94fe959b526df7adfcac5a4847565f64acfa9)
+++ b/ECM2434/Ecolution/models.py	(date 1741872102961)
@@ -151,7 +151,9 @@
             file_name = f'event_{self.pk}_qr.png'
             self.qr_code.save(file_name, ContentFile(buffer.getvalue()), save=False)
             self.url_qr_code = full_url
-            super().save(*args, **kwargs)
+
+            # Save the updated instance with the QR code
+            #super().save(*args, **kwargs)  # Save again after QR code creation
     
 class Task(models.Model):
     task_id = models.AutoField(primary_key=True)
@@ -165,8 +167,8 @@
     class Meta:
         constraints = [
             models.UniqueConstraint(
-                fields=['task_name', 'creator'],
-                name='unique_task_for_creator'
+                fields = ['task_name', 'creator'],
+                name = 'unique_task_for_creator'
             )
         ]
 
Index: ECM2434/Ecolution/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth import authenticate, login, logout, get_user_model, update_session_auth_hash\nfrom django.contrib.auth.decorators import login_required\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.contrib import messages\nfrom django.http import HttpResponse, JsonResponse, Http404\nfrom django.db import IntegrityError\nfrom django.contrib.auth import logout\nfrom django.shortcuts import redirect\nfrom django.views.decorators.cache import never_cache\nfrom .models import Task, UserTask, CustomUser, Pet, Event, UserEvent, ShopItem, UserItem\n\n# Create your views here.\ndef index(request):\n    return redirect(\"home\")\n\nUser = get_user_model()\n\ndef signup_view(request):\n    if request.method == \"POST\":\n        email = request.POST[\"email\"]\n        username = request.POST[\"username\"]\n        password1 = request.POST[\"password1\"]\n        password2 = request.POST[\"password2\"]\n        pet_type = request.POST.get(\"pet_type\", \"mushroom\")  # Default to mushroom\n        pet_name = request.POST.get(\"pet_name\", \"\") if pet_type else None\n\n        if password1 != password2:\n            messages.error(request, \"Passwords do not match!\")\n            return render(request, \"signup.html\")\n\n        if User.objects.filter(username=username).exists():\n            messages.error(request, \"Username already taken!\")\n            return render(request, \"signup.html\")\n\n        # Create the new user\n        user = User.objects.create_user(username=username, email=email, password=password1)\n        user.save()\n\n        # Assign a pet to the new user\n        pet = Pet.objects.create(user=user, pet_name=pet_name if pet_name else pet_type, pet_type=pet_type)\n        pet.save()\n\n        ## Assigns the pet to the user and saves the user\n        user.displayed_pet = pet\n        user.save()\n\n        messages.success(request, \"Account created! You can now log in.\")\n        return redirect(\"login\")\n\n    return render(request, \"signup.html\")\n\ndef login_view(request):\n    if request.method == \"POST\":\n        username = request.POST[\"username\"]\n        password = request.POST[\"password\"]\n        user = authenticate(request, username=username, password=password)\n\n        if user is not None:\n            login(request, user)\n            return redirect(\"home\")  # Redirects to home.html\n        else:\n            messages.error(request, \"Invalid username or password\")\n\n    return render(request, \"login.html\")\n\n@never_cache\ndef logout_view(request):\n    logout(request)\n    return redirect(\"login\")  # replace 'home' with your actual home page URL name\n\n@login_required\ndef home_view(request):\n    user = request.user  # Get the logged-in user\n    pet = request.user.displayed_pet # Get the pet displayed by the user\n    # This retrieves the 5 most recent tasks by date to display on home page \n    user_tasks = UserTask.objects.filter(user=user, completed=False).order_by('date')[:5]\n    \n    context = {\n        \"points\": user.points,\n        \"pet_exp\": pet.pet_exp if pet else 0,\n        \"pet_name\": pet.pet_name if pet else \"No Pet\",\n        \"pet_type\": pet.pet_type.lower() if pet else \"default\",\n        \"pet_size\": pet.determine_size() if pet else \"small\",  # Determine size\n        \"level\": pet.pet_level if pet else 0,\n        \"pet\": pet,\n        \"user_tasks\":user_tasks\n    }\n\n    return render(request, 'home.html', context)\n\n\n@login_required\ndef tasks_view(request):\n    \"\"\"\n    Gets all of the tasks for a specific user and renders the task page\n    \"\"\"\n    user_tasks = UserTask.objects.filter(user=request.user)\n    # Predefined tasks are those created by a superuser (or another designated admin)\n    predefined_tasks = Task.objects.filter(creator__is_superuser=True)\n    # Custom tasks are those created by the current user\n    custom_tasks = Task.objects.filter(creator=request.user)\n    return render(request, \"tasks.html\", {\n        \"user_tasks\": user_tasks,\n        \"predefined_tasks\": predefined_tasks,\n        \"custom_tasks\": custom_tasks,\n        \"points\": request.user.points\n    })\n\n@login_required\ndef add_task(request):\n    \"\"\"\n    Handles adding tasks to the users active task list and creating custom tasks.\n    \"\"\"\n    if request.method == \"POST\":\n        task_id = request.POST.get(\"task_id\")\n        task_name = request.POST.get(\"task_name\")\n        description = request.POST.get(\"description\")\n\n        if task_id:\n            # User selected an existing task. Either predefined or custom\n            task = get_user_or_superuser_task(task_id, request.user)\n        else:\n            # User is creating a brand-new custom task.\n            if Task.objects.filter(creator=request.user, task_name=task_name).exists():\n                return JsonResponse({\n                    \"status\": \"error\",\n                    \"message\": \"You already created a custom task with that title.\"\n                }, status=400)\n            # Creates a new task object\n            task = Task.objects.create(\n                task_name=task_name,\n                description=description,\n                creator=request.user\n            )\n\n        try:\n            # Try to create a UserTask object\n            UserTask.objects.create(user=request.user, task=task)\n        # This will throw an exception if the user task already exists with the same date\n        except IntegrityError:\n            return JsonResponse({\n                \"status\": \"error\",\n                \"message\": \"This task already exists!\"\n            }, status=400)\n\n        return JsonResponse({\n            \"status\": \"success\",\n            \"task_name\": task.task_name,\n            \"description\": task.description\n        })\n\n    return JsonResponse({\"status\": \"error\"}, status=400)\n\n\ndef get_user_or_superuser_task(task_id, user):\n    \"\"\"\n    Takes a task_id and returns a Task object that is either owned bt the user\n    or by a superuser.\n    \"\"\"\n    # Try to get a user-created task\n    try:\n        return Task.objects.get(task_id=task_id, creator=user)\n    except Task.DoesNotExist:\n        pass\n\n    # If that fails, try to get a superuser-created task\n    try:\n        return Task.objects.get(task_id=task_id, creator__is_superuser=True)\n    except Task.DoesNotExist:\n        raise Http404(\"Task not found or not accessible.\")\n\n\n@login_required\ndef delete_task(request, user_task_id):\n    \"\"\"Deletes a UserTask\"\"\"\n    if request.method == \"POST\":\n        user_task = get_object_or_404(UserTask, pk=user_task_id, user=request.user)\n        user_task.delete()\n        return JsonResponse({'status': 'success'})\n    return JsonResponse({\"status\": \"error\"}, status=400)\n\n\n@login_required\ndef complete_task(request, task_id):\n    if request.method == \"POST\":\n        user_task = get_object_or_404(UserTask, task__task_id=task_id, user=request.user)\n        if not user_task.completed:\n            user_task.completed = True\n            user_task.save()\n\n            # Add points to the users total points\n            task = user_task.task\n            request.user.points += task.points_given\n            request.user.save()\n\n            # Add task xp to the pet's overall xp, currently this will just get the first pet in the list\n            pet = Pet.objects.filter(user=request.user).first()\n            if pet:\n                pet.pet_exp += task.xp_given\n                if pet.pet_exp >= 100:\n                    pet.pet_level += 1\n                    pet.pet_exp -= 100\n                pet.save()\n                \n        return JsonResponse({\"status\": \"success\", \"points\": request.user.points})\n    return JsonResponse({\"status\": \"error\"}, status=400)\n\ndef events_view(request):\n    all_user_events = UserEvent.objects.filter(user=request.user)\n    incomplete_user_events = UserEvent.objects.filter(user=request.user, completed = False)\n\n    user_events = Event.objects.filter(event_id__in=incomplete_user_events.values_list(\"event_id\", flat=True))\n    all_events = Event.objects.exclude(event_id__in=all_user_events.values_list(\"event_id\", flat=True))\n    \n    context = {\"user_events\": user_events, \"events\": all_events, \"points\": request.user.points}\n    return render(request, \"events.html\", context)\n\ndef join_event(request):\n    if request.method == \"POST\":\n        try:\n            event_id = request.POST.get(\"event_id\")\n            event = get_object_or_404(Event, event_id=event_id)\n            UserEvent.objects.create(user=request.user, event=event)\n\n            return JsonResponse({\"success\": True})\n        except Exception as e:\n            return JsonResponse({\"success\": False, \"message\": str(e)})\n    return JsonResponse({\"success\": False, \"message\": \"Invalid request\"})\n\ndef leave_event(request):\n    if request.method == \"POST\":\n        try:\n            event_id = request.POST.get(\"event_id\")\n            event = get_object_or_404(Event, event_id=event_id)\n            UserEvent.objects.filter(user=request.user, event=event).delete()\n\n            return JsonResponse({\"success\": True})\n        except Exception as e:\n            return JsonResponse({\"success\": False, \"message\": str(e)})\n    return JsonResponse({\"success\": False, \"message\": \"Invalid request\"})\n\ndef complete_event(request):\n    if request.method == \"POST\":\n        try:\n            event_id = request.POST.get(\"event_id\")\n            event = get_object_or_404(Event, event_id=event_id)\n            event_points = event.total_points\n            UserEvent.objects.filter(user=request.user, event=event).update(completed=True)\n            CustomUser.objects.filter(id=request.user.id).update(points=request.user.points + event_points)\n\n            return JsonResponse({\"success\": True})\n        except Exception as e:\n            return JsonResponse({\"success\": False, \"message\": str(e)})\n    return JsonResponse({\"success\": False, \"message\": \"Invalid request\"})\n\ndef get_event_tasks(request, event_id):\n    try:    \n        event = get_object_or_404(Event, event_id=event_id)\n        tasks =  Task.objects.filter(event=event)\n\n        tasks_data = [\n            {\n                \"task_id\": task.task_id,\n                \"task_name\": task.task_name,\n                \"description\": task.description,  # Add more fields as needed\n                \"points_given\": task.points_given,\n                \"xp_given\": task.xp_given,\n            }\n            for task in tasks\n        ]\n\n        return JsonResponse({\"tasks\": tasks_data})\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=500)\n\n\n\n\ndef settings_view(request):\n    user = request.user\n    context = {\n        \"name\" : user.username,\n        \"points\": user.points\n    }\n    return render(request, \"settings.html\", context)\n\n@login_required\ndef delete_account(request):\n    user = request.user  # Get the logged-in user\n\n    if request.method == \"POST\":\n        # Delete all related data\n        UserTask.objects.filter(user=user).delete()\n        UserEvent.objects.filter(user=user).delete()\n        Pet.objects.filter(user=user).delete()\n\n        # Delete user account\n        user.delete()\n\n        # Log the user out\n        logout(request)\n\n        # Show a success message\n        messages.success(request, \"Your account has been deleted successfully.\")\n        \n        # Redirect to the homepage or login page\n        return redirect(\"home\")  # Change \"home\" to your homepage URL name\n\n    return render(request, \"delete_account.html\")\n\n\n@login_required\ndef change_password(request):\n    if request.method == \"POST\":\n        current_password = request.POST[\"current_password\"]\n        new_password1 = request.POST[\"new_password1\"]\n        new_password2 = request.POST[\"new_password2\"]\n        \n        if new_password1 != new_password2:\n            messages.error(request, \"New passwords do not match!\")\n            return redirect(\"settings\")\n\n        user = request.user\n        if not user.check_password(current_password):\n            messages.error(request, \"Current password is incorrect!\")\n            return redirect(\"settings\")\n\n        user.set_password(new_password1)\n        user.save()\n\n        # Keep the user logged in after password change\n        update_session_auth_hash(request, user)\n\n        messages.success(request, \"Password updated successfully!\")\n        return redirect(\"settings\")\n\n    return redirect(\"settings\")\n\n@login_required\ndef update_fontsize(request):\n    if request.method == \"POST\":\n        try:\n            data = json.loads(request.body)\n            # Convert the incoming font size value to an integer.\n            try:\n                font_size = int(data.get(\"preferred_font_size\"))\n            except (TypeError, ValueError):\n                return JsonResponse({\"status\": \"error\", \"message\": \"Invalid font size\"})\n\n            # Validate against the numeric choices\n            if font_size not in [CustomUser.FONT_SIZE_SMALL, CustomUser.FONT_SIZE_MEDIUM, CustomUser.FONT_SIZE_LARGE]:\n                return JsonResponse({\"status\": \"error\", \"message\": \"Invalid font size\"})\n\n            request.user.preferred_font_size = font_size\n            request.user.save()\n            return JsonResponse({\"status\": \"success\"})\n        except Exception as e:\n            return JsonResponse({\"status\": \"error\", \"message\": str(e)})\n    return JsonResponse({\"status\": \"error\", \"message\": \"Invalid request\"})\n\n@login_required\ndef get_fontsize(request):\n    return JsonResponse({\"preferred_font_size\": request.user.preferred_font_size})\n\n\ndef terms_view(request):\n    return render(request, \"term.html\")\n\n@login_required\ndef shop_view(request):\n    shop_items = ShopItem.objects.all()\n    purchased_item_ids = UserItem.objects.filter(user=request.user).values_list('shopitem__id', flat=True)\n    return render(request, \"shop.html\", {\n        \"shop_items\": shop_items,\n        \"purchased_item_ids\": list(purchased_item_ids)\n    })\n\n@login_required\ndef buy_item(request, item_id):\n    if request.method == \"POST\":\n        shop_item = get_object_or_404(ShopItem, id=item_id)\n        if UserItem.objects.filter(user=request.user, shopitem=shop_item).exists():\n            return JsonResponse({\n                \"status\": \"error\",\n                \"message\": \"You have already purchased this item.\"\n            }, status=400)\n        \n        if request.user.points < shop_item.price:\n            return JsonResponse({\n                \"status\": \"error\",\n                \"message\": \"Insufficient points to purchase this item.\"\n            }, status=400)\n        \n        request.user.points -= shop_item.price\n        request.user.save()\n        UserItem.objects.create(user=request.user, shopitem=shop_item)\n        return JsonResponse({\n            \"status\": \"success\",\n            \"message\": \"Purchase successful!\",\n            \"item\": shop_item.name,\n            \"remaining_points\": request.user.points\n        })\n    return JsonResponse({\"status\": \"error\", \"message\": \"Invalid request.\"}, status=400)\n\n@login_required\ndef validate_qr(request, token):\n    # Retrieve the event using the unique token\n    event = get_object_or_404(Event, unique_token=token)\n    \n    # Retrieve the UserEvent linking the current user to the event\n    user_event = get_object_or_404(UserEvent, event=event, user=request.user)\n    \n    # Mark the attendance as validated if not already done\n    if not user_event.validated:\n        user_event.validated = True\n        user_event.save()\n        message = \"Attendance validated.\"\n    else:\n        message = \"Attendance already validated.\"\n    \n    # Return a JSON response with the validation message\n    return JsonResponse({'message': message})
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ECM2434/Ecolution/views.py b/ECM2434/Ecolution/views.py
--- a/ECM2434/Ecolution/views.py	(revision 60f94fe959b526df7adfcac5a4847565f64acfa9)
+++ b/ECM2434/Ecolution/views.py	(date 1741872317742)
@@ -90,7 +90,6 @@
 
     return render(request, 'home.html', context)
 
-
 @login_required
 def tasks_view(request):
     """
