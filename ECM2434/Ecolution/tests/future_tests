-- Settings --
    ## As a user, I can view my completed tasks
    ## As a user, I can view the date I joined the site
    ## As a user, I can view the number of tasks completed

    ## As a user, I can change my username
    def test_settings_change_username(self):
        # user enters new username
        # TODO: enter correct username change url
        # self.client.post(reverse(/username_url/), 'notatestuser')

    ## As a user, I can change my pet's name
    def test_settings_change_petname(self):
        # TODO: user enters new petname

    ## As a user, I can edit my profile
    def test_settings_edit_profile(self):
        response = self.client.get(reverse('settings'))

        # user selects "Edit Profile"
        response = self.client.post(reverse('edit_profile'))
        self.assertEqual(response.status_code, 200)

-- Login --
    ## As a user, I can reset my password
        # TODO: see todo's for test case

        # TODO: user selects reset password link and redirected to reset pwd page

        # TODO: user enters new password

        # TODO: user's password is reset and can login with new password

-- Admin --
    ## As an admin, I can add content
    ## As an admin, I can remove content
    ## As an admin, I can edit content
    ## As an admin, I can remove(?) users
    ## As an admin, I can add(?) users

-- Events --
    ## As a user, I can search for events
    ## As a user, I can view event details
    ## As a user, I can add events to my list
    ## As a user, I can remove events from my list
    ## As a user, I can view event location
    ## As a user, I can complete events by completing all sub-tasks

    # As a user, I can open and close the menu
    def test_events_menu(self):
        # simulate toggling the menu
        response = self.client.post(reverse('events'), {'show menu': True}, follow=True)

        # check if 'menu' appears in the response
        self.assertContains(response, 'menu')

        # simulate closing the menu
        response = self.client.post(reverse('events'), {'show menu': False}, follow=True)

        # check if 'menu' disappears
        self.assertNotContains(response, 'menu')

-- Tasks --
    ## As a user, I can search for tasks
    ## TODO: update based on search functionality (if implemented)
    def test_task_search(self):
        self.client.login(username = 'testuser', password = 'password')

        # navigate to tasks page
        response = self.client.get('/tasks/search/') # TODO: ensure correct URL + search function exists

        # search for existing task "Buy groceries"
        response = self.client.get('/tasks/', {'q': 'Buy groceries'})

        # check responses
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Buy groceries')
        self.assertNotContains(response, 'Task 1')

-- Homepage --
    ## As a user, I can open and close the menu
    def test_homepage_menu_open(self):
       self.client.get(reverse('home'))
       response = self.client.post(reverse('home'), {'show menu': True}, follow = True)  # TODO: check syntax

       # menu opens up
       self.assertContains(response, 'menu')

       # user deselects menu button
       response = self.client.post(reverse('home'), {'show menu': False}, follow=False)

       # menu closes
       self.assertNotContains(response, 'menu')